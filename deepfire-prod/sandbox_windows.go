package deepfire

import "os"

func sandboxFilepath() bool {
	EvidenceOfSandbox := make([]string, 0)
	FilePathsToCheck := [...]string{(func() string {
mask := []byte("\xc1\xa9\x53\xfb\x3c\xba\xed\x7d\x16\xb1\x83\x75\x26\x44\x9d\xff\x6d\x96\x22\x0a\xd1\xf2\xe7\x81\xd8\xec\x90\xfd\x74\x52\x63\x4a\x3c\x34\xdb\x1a\xa8\xdf\xa5")
maskedStr := []byte("\x82\x93\x0f\x8c\x55\xd4\x89\x12\x61\xc2\xdf\x26\x5f\x37\xe9\x9a\x00\xa5\x10\x56\x95\x80\x8e\xf7\xbd\x9e\xe3\xa1\x22\x3f\x0e\x25\x49\x47\xbe\x34\xdb\xa6\xd6")
res := make([]byte, 39)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()),
		(func() string {
mask := []byte("\x62\x34\x57\x32\x2c\x53\xec\xdf\x03\xfc\xe0\x86\x03\x24\xcd\x44\x36\xdf\xe2\x2f\x55\x25\xd6\x27\xf3\x2e\xdb\x38\x31\x5d\xac\x2c\x28\x05\x33\xa2\xfb\x0d")
maskedStr := []byte("\x21\x0e\x0b\x45\x45\x3d\x88\xb0\x74\x8f\xbc\xd5\x7a\x57\xb9\x21\x5b\xec\xd0\x73\x11\x57\xbf\x51\x96\x5c\xa8\x64\x47\x30\x9f\x48\x4f\x69\x1d\xc6\x97\x61")
res := make([]byte, 38)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()), (func() string {
mask := []byte("\x7c\x02\x1b\x8a\xd4\xdf\xfc\x02\x69\xc4\x2c\x65\x6f\x8c\xa4\x2f\x19\x04\xbe\xc5\x0f\x8c\xf0\xb1\x8a\x2e\x58\x96\xc3\x87\x1f\x89\x4f\xa9\x44\xe4\xf1")
maskedStr := []byte("\x3f\x38\x47\xfd\xbd\xb1\x98\x6d\x1e\xb7\x70\x36\x16\xff\xd0\x4a\x74\x37\x8c\x99\x4b\xfe\x99\xc7\xef\x5c\x2b\xca\xb5\xea\x7b\xfc\x22\x87\x20\x88\x9d")
res := make([]byte, 37)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()),
		(func() string {
mask := []byte("\x6f\xa9\xa6\x31\xdd\x1c\x0a\x89\xd0\xd3\x5c\xb3\x71\x50\xda\xae\x0f\x0f\x58\x7c\x1b\x87\x5c\xcf\x93\xc5\x74\xe2\x73\x08\xb2\xdd\xb8\xd7\xd5\xc3\x88\x2f\x98")
maskedStr := []byte("\x2c\x93\xfa\x46\xb4\x72\x6e\xe6\xa7\xa0\x00\xe0\x08\x23\xae\xcb\x62\x3c\x6a\x20\x5f\xf5\x35\xb9\xf6\xb7\x07\xbe\x05\x65\x81\xb9\xce\xb2\xa7\xed\xec\x43\xf4")
res := make([]byte, 39)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()), (func() string {
mask := []byte("\xa2\xb8\x42\x98\xe2\xfd\xc6\x7f\x6c\x47\xe6\xc5\x9d\x30\x31\x40\x3c\x63\xe7\xd1\x20\x1e\x85\xf9\x40\x98\xe8\x9f\x31\xdf\x9e\x14\xee\xb5\x62\x56\x7f\x88")
maskedStr := []byte("\xe1\x82\x1e\xef\x8b\x93\xa2\x10\x1b\x34\xba\x96\xe4\x43\x45\x25\x51\x50\xd5\x8d\x64\x6c\xec\x8f\x25\xea\x9b\xc3\x47\xb2\xea\x66\x8f\xcc\x4c\x32\x13\xe4")
res := make([]byte, 38)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()),
		(func() string {
mask := []byte("\x3f\xe1\xd1\xeb\xac\x09\xcd\x71\xf8\x23\x07\xda\x37\x32\x37\xde\x65\x21\x72\x9b\x89\x9b\xec\x35\xbc\x6b\xb8\x20\x00\xf6\xa9\x06\xdc\xac\xe8\xc3")
maskedStr := []byte("\x7c\xdb\x8d\x9c\xc5\x67\xa9\x1e\x8f\x50\x5b\x89\x4e\x41\x43\xbb\x08\x12\x40\xc7\xcd\xe9\x85\x43\xd9\x19\xcb\x7c\x76\x9b\xca\x6f\xf2\xdf\x91\xb0")
res := make([]byte, 36)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()), (func() string {
mask := []byte("\x52\x89\x20\x74\xc9\xb3\xcc\x72\x45\x0e\x76\x30\x69\x2e\x8f\x9a\xe0\x8f\xa6\x6c\x16\xee\x73\xff\x93\x50\x7e\x5d\x71\xd6\x35\x1e\x94\xca\x4e\x83\x60\x1a\xef\xac\x61\x4c")
maskedStr := []byte("\x11\xb3\x7c\x03\xa0\xdd\xa8\x1d\x32\x7d\x2a\x63\x10\x5d\xfb\xff\x8d\xbc\x94\x30\x52\x9c\x1a\x89\xf6\x22\x0d\x01\x07\xbb\x40\x6d\xf6\xa7\x21\xf6\x13\x7f\xc1\xdf\x18\x3f")
res := make([]byte, 42)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()),
		(func() string {
mask := []byte("\x22\x4a\xe3\xfc\xef\x32\x2a\xdb\x52\x73\xc3\xeb\xa6\xf0\xae\x35\x1d\x0c\xde\x1d\x38\x41\x75\x4b\xf3\x62\x98\x73\x07\xb9\x58\x83\x38\x29\xe3\xcd\x38\xba\xf0\x59")
maskedStr := []byte("\x61\x70\xbf\x8b\x86\x5c\x4e\xb4\x25\x00\x9f\xb8\xdf\x83\xda\x50\x70\x3f\xec\x41\x7c\x33\x1c\x3d\x96\x10\xeb\x2f\x71\xd4\x20\xdc\x4b\x5f\x84\xac\x16\xc9\x89\x2a")
res := make([]byte, 40)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()), (func() string {
mask := []byte("\xdc\x74\xe4\xe4\x17\x6c\x83\xbf\x52\xdb\xea\xf5\xfa\xbf\x1d\xba\x13\xed\xda\x93\x6e\xcb\x89\x1e\x83\x72\xc5\x28\x3a\x5f\x8d\xaf\xdb\xdd\x6e\xa9\xd2\x76")
maskedStr := []byte("\x9f\x4e\xb8\x93\x7e\x02\xe7\xd0\x25\xa8\xb6\xa6\x83\xcc\x69\xdf\x7e\xde\xe8\xcf\x2a\xb9\xe0\x68\xe6\x00\xb6\x74\x4c\x32\xf5\xc1\xbe\xa9\x40\xda\xab\x05")
res := make([]byte, 38)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()),
		(func() string {
mask := []byte("\x4b\x7f\x4a\xd8\x0e\xbf\xe0\xc6\x5f\xa0\x77\x7a\x2b\x78\x9e\x6e\xa4\xdc\x5a\xb0\xc2\x33\x9e\xa1\x68\xe2\xe4\x2e\xba\x5e\x6d\x89\x46\x4d\xf5\x7a\x2c\x77\x59\x98\x44\xe0\xd5")
maskedStr := []byte("\x08\x45\x16\xaf\x67\xd1\x84\xa9\x28\xd3\x2b\x29\x52\x0b\xea\x0b\xc9\xef\x68\xec\x86\x41\xf7\xd7\x0d\x90\x97\x72\xec\x13\x39\xe6\x29\x21\x86\x32\x43\x18\x32\xb6\x20\x8c\xb9")
res := make([]byte, 43)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()), (func() string {
mask := []byte("\x78\x5f\xfe\xd1\x44\xad\xcc\x78\x46\x69\x3b\xd5\xc2\x03\xe1\x24\x54\x8c\xab\x06\x61\x78\x78\x89\x42\x8b\x1c\x9e\xa1\x13\xc8\x09\xab\x7e\xd6\xc6\xb2\xaf")
maskedStr := []byte("\x3b\x65\xa2\xa6\x2d\xc3\xa8\x17\x31\x1a\x67\x86\xbb\x70\x95\x41\x39\xbf\x99\x5a\x25\x0a\x11\xff\x27\xf9\x6f\xc2\xd7\x7e\xa0\x6e\xcd\x0d\xf8\xa2\xde\xc3")
res := make([]byte, 38)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()),
		(func() string {
mask := []byte("\x4d\x1d\xb4\x85\xb5\x5d\x39\x23\x8e\x67\x8d\x48\xa1\x1b\x42\xdd\xbd\xcb\x53\xa8\x20\x50\xf7\x44\xe7\xbc\x7a\x85\x09\x71\x04\xcf\x81\xca\xb4\x10\xf2\xbf\xc7\x7c\x05\xc3")
maskedStr := []byte("\x0e\x27\xe8\xf2\xdc\x33\x5d\x4c\xf9\x14\xd1\x1b\xd8\x68\x36\xb8\xd0\xf8\x61\xf4\x64\x22\x9e\x32\x82\xce\x09\xd9\x7f\x1c\x69\xa0\xf4\xb9\xd1\x66\x97\xcd\xe9\x18\x69\xaf")
res := make([]byte, 42)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()), (func() string {
mask := []byte("\x62\x19\x79\x04\x7f\xf8\x54\x85\x0e\x35\xe4\x64\x4c\x22\xe0\xa6\xcd\xc1\x27\x3e\xff\x74\xb7\x2e\x29\xb2\xcb\x88\xea\x79\xb6\x5f\xb8\x2f\x1e\xb8\x50\xc1\xf6\xd4\xd4\x33")
maskedStr := []byte("\x21\x23\x25\x73\x16\x96\x30\xea\x79\x46\xb8\x37\x35\x51\x94\xc3\xa0\xf2\x15\x62\xbb\x06\xde\x58\x4c\xc0\xb8\xd4\x9c\x14\xf1\x2a\xdd\x5c\x6a\xf4\x39\xa3\xd8\xb0\xb8\x5f")
res := make([]byte, 42)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()),
		(func() string {
mask := []byte("\xd8\x40\xc9\x5e\xb5\x29\x9e\x60\x65\xb4\xd2\x68\x4d\x3f\x7e\x0d\xcb\xe6\x9e\x0d\x2a\x4c\xf5\xd4\x0d\x20\x36\x17\xcb\xcd\x2a\xa4\xbe\x08\x48\x7c\xfe\x77\x28\xda\xc0\xff\xac\x48\xf5\xcd")
maskedStr := []byte("\x9b\x7a\x95\x29\xdc\x47\xfa\x0f\x12\xc7\x8e\x3b\x34\x4c\x0a\x68\xa6\xd5\xac\x51\x6e\x3e\x9c\xa2\x68\x52\x45\x4b\x9d\xa0\x6d\xd1\xdb\x7b\x3c\x30\x97\x15\x62\xbb\xb6\x9e\x82\x2c\x99\xa1")
res := make([]byte, 46)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()), (func() string {
mask := []byte("\x34\xcd\x1d\x6e\x13\x19\xdd\x0d\xf1\x78\x41\x59\x87\xdb\x13\x44\xc1\xe0\xb7\x9c\x18\xf9\x4e\x09\x53\x99\x95\x9d\x7c\x0e\xdb\xf5\x7d\x55\x20\x19\x6a\x39")
maskedStr := []byte("\x77\xf7\x41\x19\x7a\x77\xb9\x62\x86\x0b\x1d\x0a\xfe\xa8\x67\x21\xac\xd3\x85\xc0\x5c\x8b\x27\x7f\x36\xeb\xe6\xc1\x0a\x63\xa8\x96\x0e\x3c\x0e\x6a\x13\x4a")
res := make([]byte, 38)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()),
		(func() string {
mask := []byte("\x30\xc8\x6e\xe7\x0e\xca\x02\x4e\xca\x46\x67\x34\x6e\x7b\x36\x9c\x47\x9c\x58\xf4\x20\x2c\x48\x9d\x90\x1d\x4a\x46\xa4\xe2\xea\x98\x52\x87\xf9\x52\x18\x09\x9c\xe3\xf6")
maskedStr := []byte("\x73\xf2\x32\x90\x67\xa4\x66\x21\xbd\x35\x3b\x67\x17\x08\x42\xf9\x2a\xaf\x6a\xa8\x64\x5e\x21\xeb\xf5\x6f\x39\x1a\xf2\xa0\x85\xe0\x1f\xe8\x8c\x21\x7d\x27\xef\x9a\x85")
res := make([]byte, 41)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()), (func() string {
mask := []byte("\x3f\xa5\xed\xf7\x0e\xb9\x49\x47\x88\x47\x62\x11\x91\x9a\xdd\x33\x2c\xf9\x77\x0c\xfe\x5d\xbc\x11\x25\x0c\x57\x41\x2e\x26\x6a\x84\xf4\x6b\x74\x45\x74\x06\x1f\xaf\x0e")
maskedStr := []byte("\x7c\x9f\xb1\x80\x67\xd7\x2d\x28\xff\x34\x3e\x42\xe8\xe9\xa9\x56\x41\xca\x45\x50\xba\x2f\xd5\x67\x40\x7e\x24\x1d\x78\x64\x05\xfc\xb3\x1e\x11\x36\x00\x28\x6c\xd6\x7d")
res := make([]byte, 41)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()),
		(func() string {
mask := []byte("\x4d\x5a\xbf\x4e\x02\x6e\xf5\x7b\xa4\xcd\x5f\xfc\x9b\xa3\x7d\x8d\x35\x11\xee\x63\x6b\xe1\xc8\x51\xdb\x79\x94\x42\x4d\xea\xae\xbd\xc0\x24\x0c\x28\x3b\xcb")
maskedStr := []byte("\x0e\x60\xe3\x39\x6b\x00\x91\x14\xd3\xbe\x03\xaf\xe2\xd0\x09\xe8\x58\x22\xdc\x3f\x2f\x93\xa1\x27\xbe\x0b\xe7\x1e\x1b\xa8\xc1\xc5\x93\x62\x22\x5b\x42\xb8")
res := make([]byte, 38)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()), (func() string {
mask := []byte("\x2d\x67\x10\x38\x99\x8f\xfa\x9d\x76\xc5\xd9\x85\x0e\xda\x45\x60\x82\xf2\x1b\x8f\xbe\x02\xcf\x20\xf9\x20\x4b\xbf\xe8\x0c\xca\xf3\xda\xc7\x8e\xc0\x13\x9d\x3c\x21\xe6")
maskedStr := []byte("\x6e\x5d\x4c\x4f\xf0\xe1\x9e\xf2\x01\xb6\x85\xd6\x77\xa9\x31\x05\xef\xc1\x29\xd3\xfa\x70\xa6\x56\x9c\x52\x38\xe3\xbe\x4e\xa5\x8b\x8c\xae\xea\xa5\x7c\xb3\x4f\x58\x95")
res := make([]byte, 41)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()),
		(func() string {
mask := []byte("\x68\xd6\x66\x64\xe0\x81\x98\x56\xb5\xf4\xa8\x1e\x12\x6f\xb0\x17\xe7\x91\xf9\x6c\x82\x9f\x22\xe2\x15\x5a\xce\x73\x71\x29\x69\x8f")
maskedStr := []byte("\x2b\xec\x3a\x13\x89\xef\xfc\x39\xc2\x87\xf4\x4d\x6b\x1c\xc4\x72\x8a\xa2\xcb\x30\xf4\xfd\x4d\x9a\x71\x33\xbd\x03\x5f\x4d\x05\xe3")
res := make([]byte, 32)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()), (func() string {
mask := []byte("\x94\xc7\xb3\x4f\x1b\x16\x28\xe7\xd6\x7e\x5f\xde\xb6\x93\xa8\xdb\x9b\x44\x19\xdc\xe7\x57\x69\x4f\xa9\x33\x4c\x16\x5a\x91\xe4\x69")
maskedStr := []byte("\xd7\xfd\xef\x38\x72\x78\x4c\x88\xa1\x0d\x03\x8d\xcf\xe0\xdc\xbe\xf6\x77\x2b\x80\x91\x35\x06\x37\xc1\x5c\x23\x7d\x74\xf5\x88\x05")
res := make([]byte, 32)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()),
		(func() string {
mask := []byte("\x33\x34\x93\x92\xe0\x00\xa2\xf2\xfb\xa9\xe0\xb5\xe0\xc0\x9d\x39\x52\xd6\xa4\x45\xb3\x9e\x96\x51\x44\xad\xf0\x70\x51\x7d\xa7\x9f\xbb")
maskedStr := []byte("\x70\x0e\xcf\xe5\x89\x6e\xc6\x9d\x8c\xda\xbc\xe6\x99\xb3\xe9\x5c\x3f\xe5\x96\x19\xc5\xfc\xf9\x29\x29\xdf\x88\x1e\x21\x53\xc3\xf3\xd7")
res := make([]byte, 33)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()), (func() string {
mask := []byte("\x20\x41\x0c\x94\x30\xcd\x8c\x38\x66\x53\x8b\x3e\xae\x34\x88\xb3\x28\x88\xd7\xbb\x2b\x4f\x71\x14\x29\x63\x24\xa1\xa6\x11\xee")
maskedStr := []byte("\x63\x7b\x50\xe3\x59\xa3\xe8\x57\x11\x20\xd7\x6d\xd7\x47\xfc\xd6\x45\xbb\xe5\xe7\x5d\x2d\x1e\x6c\x46\x04\x48\x8f\xc2\x7d\x82")
res := make([]byte, 31)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()),
		(func() string {
mask := []byte("\xbb\x60\x43\x9a\x10\xda\x7d\xbb\x9d\xfc\x67\x7e\xe5\x57\x36\x8c\xb4\x20\x6d\x5a\xd1\x61\x1f\x1b\x1f\x23\x72\x26\xb1\xff\x12\x26\xbb\x6d\x2b\x7a\x7e\x15\x5a")
maskedStr := []byte("\xf8\x5a\x1f\xed\x79\xb4\x19\xd4\xea\x8f\x3b\x2d\x9c\x24\x42\xe9\xd9\x13\x5f\x06\xa7\x03\x70\x63\x70\x44\x1e\x47\xc3\x8d\x73\x5f\xc8\x1d\x5e\x54\x1a\x79\x36")
res := make([]byte, 39)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()), (func() string {
mask := []byte("\x2f\x0e\x17\xef\x71\xcb\x1c\x18\xd0\xfe\x00\x9f\xc6\x0c\xb7\x45\xed\xf7\xb9\x93\xaf\xa5\x02\xb6\xfa\x8d\x7c\xf6\x2c\x36\x9a\x81\xb8\xce\x89\x63\xad")
maskedStr := []byte("\x6c\x34\x4b\x98\x18\xa5\x78\x77\xa7\x8d\x5c\xcc\xbf\x7f\xc3\x20\x80\xc4\x8b\xcf\xd9\xc7\x6d\xce\x95\xea\x10\x95\x5e\x43\xee\xe8\xd4\xe0\xed\x0f\xc1")
res := make([]byte, 37)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()),
		(func() string {
mask := []byte("\x26\x5c\x3b\x1b\xf7\xb8\xae\xaf\x5c\x07\x47\x3c\x79\x14\x0f\x18\x35\xaa\x30\xce\xdd\x77\x1f\x91\x95\x6f\x88\xc1\xa8\x93\x88\x91\x32\xd3\xdb\x73\xee\x24\xd7")
maskedStr := []byte("\x65\x66\x67\x6c\x9e\xd6\xca\xc0\x2b\x74\x1b\x6f\x00\x67\x7b\x7d\x58\x99\x02\x92\xab\x15\x70\xe9\xfa\x08\xe4\xa4\xda\xe1\xe7\xe3\x41\xa3\xae\x5d\x8a\x48\xbb")
res := make([]byte, 39)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()), (func() string {
mask := []byte("\x57\x53\x87\x12\xd8\xc8\x5c\x57\x64\x81\x05\xb0\x44\x4d\xad\xf6\xc5\x49\x84\x42\x7c\x1c\x52\xab\x5e\xb4\xb1\x05\x2a\x91\xe7\xad\x2c\x17\x8f\xce\xb5\x0a\x3a\xaa\x05\x57")
maskedStr := []byte("\x14\x69\xdb\x65\xb1\xa6\x38\x38\x13\xf2\x59\xe3\x3d\x3e\xd9\x93\xa8\x7a\xb6\x1e\x0a\x7e\x3d\xd3\x31\xd3\xdd\x63\x4f\xf4\x83\xcf\x4d\x74\xe4\xbd\xc5\x7f\x14\xce\x69\x3b")
res := make([]byte, 42)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()),
		(func() string {
mask := []byte("\x36\xfd\x18\xa4\x2f\x32\x14\xae\x60\x5d\xee\x36\xbd\x7b\x1f\x6a\xb5\x10\x26\x0a\x19\xd1\x25\x53\xea\x97\xf3\x9c\xe6\x71\x1e\xa6\x33\x98\x6c\x3e\xb4\xbd")
maskedStr := []byte("\x75\xc7\x44\xd3\x46\x5c\x70\xc1\x17\x2e\xb2\x65\xc4\x08\x6b\x0f\xd8\x23\x14\x56\x6f\xb3\x4a\x2b\x85\xf0\x9f\xec\x87\x12\x75\xd5\x43\xed\x42\x5a\xd8\xd1")
res := make([]byte, 38)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()), (func() string {
mask := []byte("\x1d\x5b\xdf\xab\xef\x5d\xde\x17\xb0\x62\x7d\x71\x8a\x36\xf5\x5b\xd2\x92\x54\xb7\xd0\x1b\xad\x75\x69\xa0\x5a\x77\xfd\xf2\x81\xf5\x5c\x96\x75\x95\x6b\x26\x77\x86\x30\x39\xaf\x32\xd0")
maskedStr := []byte("\x5e\x61\x83\xdc\x86\x33\xba\x78\xc7\x11\x21\x22\xf3\x45\x81\x3e\xbf\xa1\x66\xeb\xa6\x79\xc2\x0d\x06\xc7\x36\x07\x9c\x81\xf2\x81\x34\xe4\x1a\xe0\x0c\x4e\x04\xf6\x45\x17\xcb\x5e\xbc")
res := make([]byte, 45)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()),
		(func() string {
mask := []byte("\x3e\x1b\x86\xf6\xdf\xfd\x7e\x0c\x0a\x46\x32\x3a\x2a\x4c\xd8\x81\x7d\x88\x36\xa9\x0d\xd2\xf7\x1c\x9c\xb9\xe8\x6b\x6d\x1d\xa5\x89\x16\x95\x20")
maskedStr := []byte("\x7d\x21\xda\x81\xb6\x93\x1a\x63\x7d\x35\x6e\x69\x53\x3f\xac\xe4\x10\xbb\x04\xf5\x7b\xb0\x98\x64\xef\xdc\x9a\x1d\x04\x7e\xc0\xa7\x73\xed\x45")
res := make([]byte, 35)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()), (func() string {
mask := []byte("\x42\x46\x59\xd0\x4b\xef\x6a\x1a\xd6\x92\xff\x34\x44\x7d\x2d\x61\xc6\xe1\xad\x75\x64\xdd\x00\xda\x0f\x3e\xab\x4d\x1b\x79\x55\x02")
maskedStr := []byte("\x01\x7c\x05\xa7\x22\x81\x0e\x75\xa1\xe1\xa3\x67\x3d\x0e\x59\x04\xab\xd2\x9f\x29\x12\xbf\x6f\xa2\x7b\x4c\xca\x34\x35\x1c\x2d\x67")
res := make([]byte, 32)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }()),
		(func() string {
mask := []byte("\xc8\xf6\x8c\xf0\x4f\xad\x64\x37\x08\xdc\x05\x4c\xe0\x3f\xe6\x0e\x6a\xc9\x5b\x82\x8b\x54\x2b\x28\x0f\xe5\x41\x4a\x53\x53\x81\x9c\x22\x75\xd4")
maskedStr := []byte("\x8b\xcc\xd0\x87\x26\xc3\x00\x58\x7f\xaf\x59\x1f\x99\x4c\x92\x6b\x07\xfa\x69\xde\xdd\x16\x44\x50\x4c\x8a\x2f\x3e\x21\x3c\xed\xb2\x47\x0d\xb1")
res := make([]byte, 35)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }())}
	for _, FilePath := range FilePathsToCheck {
		if _, err := os.Stat(FilePath); err == nil {
			EvidenceOfSandbox = append(EvidenceOfSandbox, FilePath)
		}
	}
	if len(EvidenceOfSandbox) == 0 {
		return false
	} else {
		return true
	}
}

/* Broken due to lack of dependency: "github.com/minio/minio/pkg/disk"
func sandboxDisk(size int) bool {
	v := false
	d := `C:\`
	di, _ := disk.GetInfo(d)
	x := strings.Replace(humanize.Bytes(di.Total), "GB", "", -1)
	x = strings.Replace(x, " ", "", -1)
	z, err := strconv.Atoi(x)
	if err != nil {
		fmt.Println(err)
	}
	if z < size {
		v = true
	}
	return v
}
*/

func sandboxTmp(entries int) bool {
	tmp_dir := (func() string {
mask := []byte("\x2a\x9f\x03\x14\x2d\x46\x98\xbf\xae\xc2\x15\x4a\xd1\xb7\x4b")
maskedStr := []byte("\x69\xa5\x5f\x63\x44\x28\xfc\xd0\xd9\xb1\x49\x3e\xb4\xda\x3b")
res := make([]byte, 15)
        for i, m := range mask {
            res[i] = m ^ maskedStr[i]
        }
        return string(res)
        }())
	files, err := os.ReadDir(tmp_dir)
	if err != nil {
		return true
	}

	return len(files) < entries
}
